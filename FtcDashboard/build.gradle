//noinspection GradleDependency
buildscript {
    ext.min_sdk_version = "8.2.0"
}

plugins {
    id "com.github.node-gradle.node" version "2.2.4"
}
apply plugin: "com.android.library"
apply plugin: "maven-publish"
apply plugin: "checkstyle"

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 24
        //noinspection ExpiredTargetSdkVersion
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }
}

node {
    version = "18.12.1"
    download = true
    nodeModulesDir = file("${project.projectDir}/../client")
}

yarn_build.dependsOn yarn_install

task cleanDashAssets(type: Delete) {
    delete "${android.sourceSets.getByName("main").assets.srcDirs[0]}/dash"
}

clean.dependsOn cleanDashAssets

task copyDashAssets(type: Copy) {
    from "${project.projectDir}/../client/dist"
    into "${android.sourceSets.getByName("main").assets.srcDirs[0]}/dash"
}

copyDashAssets.dependsOn cleanDashAssets
//copyDashAssets.dependsOn yarn_build

android.libraryVariants.all { variant ->
    variant.preBuildProvider.get().dependsOn copyDashAssets
}

check.dependsOn "checkstyle"

checkstyle {
    toolVersion = checkstyle_version
}

task checkstyle(type: Checkstyle) {
    description = "Check Java style with Checkstyle"
    configFile = rootProject.file("config/checkstyle/checkstyle.xml")
    source = javaSources()
    classpath = files()
    ignoreFailures = true
}

def javaSources() {
    def files = []
    android.sourceSets.each { sourceSet ->
        sourceSet.java.each { javaSource ->
            javaSource.getSrcDirs().each {
                if (it.exists()) {
                    files.add(it)
                }
            }
        }
    }
    return files
}

repositories {
    flatDir {
        dirs "../libs"
    }
    mavenCentral()
}

dependencies {
    api(project(":DashboardCore")) {
        transitive = false
    }

    api "org.firstinspires.ftc:RobotCore:$min_sdk_version"
    api "org.firstinspires.ftc:Hardware:$min_sdk_version"
    api "org.firstinspires.ftc:RobotServer:$min_sdk_version"
    api "org.firstinspires.ftc:FtcCommon:$min_sdk_version"

    implementation "androidx.annotation:annotation:1.1.0"

    implementation("org.nanohttpd:nanohttpd-websocket:2.3.1") {
        exclude module: "nanohttpd"
    }
}

def addPomDependencies(root) {
    def depsNode = root.appendNode("dependencies")

    def addDep = { groupId, artifactId, version ->
        def n = depsNode.appendNode("dependency")
        n.appendNode("groupId", groupId)
        n.appendNode("artifactId", artifactId)
        n.appendNode("version", version)
        return n
    }


    ["RobotCore", "Hardware", "RobotServer", "FtcCommon"].forEach {
        addDep("org.firstinspires.ftc", it, min_sdk_version)
    }

    addDep("androidx.annotation", "annotation", "1.1.0")

    addDep("org.nanohttpd", "nanohttpd-websocket", "2.3.1")
            .appendNode("exclusions")
            .appendNode("exclusion")
            .with {
                appendNode("groupId", "org.nanohttpd")
                appendNode("artifactId", "nanohttpd")
            }
}

task androidSourcesJar(type: Jar) {
    classifier = "sources"
    from android.sourceSets.main.java.srcDirs
}

task androidJavadocs(type: Javadoc) {
    failOnError = false
    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = "javadoc"
    from androidJavadocs.destinationDir
}

project.afterEvaluate {
    publishing {
        publications {
            maven(MavenPublication) {
                artifact bundleReleaseAar
                artifact androidSourcesJar
                artifact androidJavadocsJar
                groupId = "com.github.6165-MSET-CuttleFish"
                artifactId = "ftc-dashboard"
                version dashboard_version

                pom {
                    description = "Web dashboard designed for FTC"
                    name = "FTC Dashboard"
                    url = "https://github.com/6165-MSET-CuttleFish/ftc-dashboard"

                    licenses {
                        license {
                            name = "The MIT License"
                            url = "https://opensource.org/licenses/MIT"
                            distribution = "repo"
                        }
                    }

                    developers {
                        developer {
                            id = "6165-MSET-CuttleFish"
                            name = "MSET CuttleFish"
                            email = "aadit.noronha@gmail.com"  // Replace with your team's email
                        }
                    }

                    scm {
                        url = "https://github.com/6165-MSET-CuttleFish/ftc-dashboard"
                    }
                }

                pom.withXml {
                    def root = asNode()
                    addPomDependencies(root)
                }
            }
        }
    }
}